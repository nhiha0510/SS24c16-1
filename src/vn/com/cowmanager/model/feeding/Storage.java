package vn.com.cowmanager.model.feeding;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.util.Tuple;
import vn.com.cowmanager.model.business.Provider;
import vn.com.cowmanager.model.report.CheckExpReport;
import vn.com.cowmanager.model.report.ProQuantityReport;

@DClass(schema = "feeding")
public class Storage {

	public static final String A_id = "id";
	public static final String A_product = "product";
	public static final String A_productName = "productName";
	public static final String A_cost = "cost";
	public static final String A_quantity = "quantity";
	public static final String A_provider = "provider";
	public static final String A_dateLeft = "dateLeft";
	public static final String A_productStatus = "productStatus";
	public static final String A_checkExpReport = "checkExpReport";
	public static final String A_proQuantityReport = "proQuantityReport";

	private static int idCounter = 0;

	@DAttr(name = "id", id = true, auto = true, optional = false, mutable = false, type = Type.String, length = 6)
	private String id;

	@DAttr(name = "product", type = Type.Domain, optional = false, length = 6)
	@DAssoc(ascName = "Storage-has-food", ascType = AssocType.One2Many, endType = AssocEndType.Many, role = "StorageManager", associate = @Associate(cardMax = 25, cardMin = 1, type = Product.class))
	private Product product;

	@DAttr(name = "productName", type = Type.String, length = 25, mutable = false)
	private String productName;

	@DAttr(name = "cost", type = Type.Double, mutable = false, length = 6)
	private Double cost;

	@DAttr(name = "quantity", type = Type.Integer, length = 6, optional = false)
	private Integer quantity;

	@DAttr(name = "provider", type = Type.Domain, length = 6)
	@DAssoc(ascName = "Storage-has-provider", ascType = AssocType.One2Many, endType = AssocEndType.Many, role = "StorageManager", associate = @Associate(cardMax = 25, cardMin = 1, type = Provider.class))
	private Provider provider;

	@DAttr(name = "dateLeft", type = Type.Integer, length = 6, mutable = false)
	private Integer dateLeft;

	@DAttr(name = "productStatus", type = Type.String, length = 25, mutable = false)
	private String productStatus;

	@DAttr(name = A_checkExpReport, type = Type.Domain, serialisable = false, virtual = true)
	private CheckExpReport checkExpReport;

	@DAttr(name = A_proQuantityReport, type = Type.Domain, serialisable = false, virtual = true)
	private ProQuantityReport proQuantityReport;

	public Storage(String id, Product product, String productName, Double cost, Integer quantity, Provider provider,
			Integer dateLeft, String productStatus) {
		this.id = nextId(id);
		this.product = product;
		this.quantity = quantity;
		this.provider = provider;
		calAutogeneratedValues();
	}

	public Storage(Product food, String productName, Double cost, Integer quantity, Provider provider, Integer dateLeft,
			String productStatus) {
		this(null, food, productName, cost, quantity, provider, dateLeft, productStatus);
	}

	public void calAutogeneratedValues() {
		calCost();
		calDateLeft();
		validateProductStatus();
		productName = product.getName();
	}

	private void calCost() {
		cost = this.product.getCost();
	}

	private void calDateLeft() {
		SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date dExpDate = null;
		try {
			dExpDate = df.parse(product.getExp());
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Date curDate = new Date();

		dateLeft = (int) ((dExpDate.getTime() - curDate.getTime()) / (1000 * 60 * 60 * 24));
	}

	private void validateProductStatus() {
		if (dateLeft < 5) {
			productStatus = "Warning";
		} else if (dateLeft == 0) {
			productStatus = "Expired";
		} else {
			productStatus = "Ready to use";
		}

	}

	// automatically generate the next student id
	private String nextId(String id) throws ConstraintViolationException {
		if (id == null) { // generate a new id
			idCounter++;
			return "ST" + idCounter;
		} else {
			// update id
			int num;
			try {
				num = Integer.parseInt(id.substring(2));
			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { id });
			}

			if (num > idCounter) {
				idCounter = num;
			}

			return id;
		}
	}

	/**
	 * @requires minVal != null /\ maxVal != null
	 * @effects update the auto-generated value of attribute <tt>attrib</tt>,
	 *          specified for <tt>derivingValue</tt>, using
	 *          <tt>minVal, maxVal</tt>
	 */
	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {

		if (minVal != null && maxVal != null) {
			// TODO: update this for the correct attribute if there are more
			// than one auto attributes of this class

			String maxId = (String) maxVal;

			try {
				int maxIdNum = Integer.parseInt(maxId.substring(2));

				if (maxIdNum > idCounter) // extra check
					idCounter = maxIdNum;

			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { maxId });
			}
		}
	}

	@Override
	public String toString() {
		return "Storage(" + id + ", " + quantity + ")";
	}

	public String getId() {
		return id;
	}

	public Product getProduct() {
		return product;
	}

	public void setProduct(Product product) {
		this.product = product;
		calAutogeneratedValues();
	}

	public Double getCost() {
		return cost;
	}

	public Integer getQuantity() {
		return quantity;
	}

	public void setQuantity(Integer quantity) {
		this.quantity = quantity;
		calAutogeneratedValues();
	}

	public Provider getProvider() {
		return provider;
	}

	public void setProvider(Provider provider) {
		this.provider = provider;
		calAutogeneratedValues();
	}

	public Integer getDateLeft() {
		return dateLeft;
	}

	public String getProductStatus() {
		return productStatus;
	}

	public ProQuantityReport getProQuantityReport() {
		return proQuantityReport;
	}

	public String getProductName() {
		return productName;
	}

}
